),
dashboardPage(
skin = "yellow",
dashboardHeader( title = "SahelGeo"
),
dashboardSidebar( width = 6,
sidebarMenu(
menuItem("Visualisation des données", tabName = "visualisation",
icon = shiny::icon("angle-double-right")
)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "visualisation",
h1("Visualisation des données"),
# login section
shinyauthr::loginUI(id = "login"),
# logout button
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
leafletOutput("mymap"))
)
)
)
)
ui <- fluidPage(
theme = shinytheme("united"
),
headerPanel(title="SIG-WEB", windowTitle ="SahelGeo"
),
fluidRow(
),
dashboardPage(
skin = "yellow",
dashboardHeader( title = "SahelGeo"
),
dashboardSidebar( width = 6,
sidebarMenu(
menuItem("Visualisation des données", tabName = "visualisation",
icon = shiny::icon("angle-double-right")
)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "visualisation",
h1("Visualisation des données"),
# login section
shinyauthr::loginUI(id = "login"),
# logout button
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
leafletOutput("mymap"))
)
)
)
)
ui <- fluidPage(
theme = shinytheme("united"
),
headerPanel(title="SIG-WEB", windowTitle ="SahelGeo"
),
fluidRow(
),
dashboardPage(
skin = "yellow",
dashboardHeader( title = "SahelGeo"
),
dashboardSidebar( width = 6,
sidebarMenu(
menuItem("Visualisation des données", tabName = "visualisation",
icon = shiny::icon("angle-double-right")
)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "visualisation",
h1("Visualisation des données"),
# login section
shinyauthr::loginUI(id = "login"),
# logout button
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
leafletOutput("mymap"))
)
)
)
)
library("fontawesome")
install.packages("fontawesome")
install.packages("fontawesome")
ui <- fluidPage(
theme = shinytheme("united"
),
headerPanel(title="SIG-WEB", windowTitle ="SahelGeo"
),
fluidRow(
),
dashboardPage(
skin = "yellow",
dashboardHeader( title = "SahelGeo"
),
dashboardSidebar( width = 6,
sidebarMenu(
menuItem("Visualisation des données", tabName = "visualisation",
icon = shiny::icon("angle-double-right")
)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "visualisation",
h1("Visualisation des données"),
# login section
shinyauthr::loginUI(id = "login"),
# logout button
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
leafletOutput("mymap"))
)
)
)
)
ui <- fluidPage(
theme = shinytheme("united"
),
headerPanel(title="SIG-WEB", windowTitle ="SahelGeo"
),
fluidRow(
),
dashboardPage(
skin = "yellow",
dashboardHeader( title = "SahelGeo"
),
dashboardSidebar( width = 6,
sidebarMenu(
menuItem("Visualisation des données", tabName = "visualisation",
icon = shiny::icon("angle-double-right")
)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "visualisation",
h1("Visualisation des données"),
# login section
shinyauthr::loginUI(id = "login"),
# logout button
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
leafletOutput("mymap"))
)
)
)
)
#Data frame de l espace login
user_base <- tibble::tibble(
user = c("sahelgeo", "user2"),
password = sapply(c("sahel1951", "pass2"), sodium::password_store),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
#Data frame de l espace login
user_base <- tibble::tibble(
user = c("sahelgeo", "user2"),
password = sapply(c("sahel1951", "pass2"), sodium::password_store),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
library(shinyauthr)
#Data frame de l espace login
user_base <- tibble::tibble(
user = c("sahelgeo", "user2"),
password = sapply(c("sahel1951", "pass2"), sodium::password_store),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
library(sodium)
install.packages("sodium")
library(sodium)
install.packages("fontawesome")
library(fontawesome)
#Data frame de l espace login
user_base <- tibble::tibble(
user = c("sahelgeo", "user2"),
password = sapply(c("sahel1951", "pass2"), sodium::password_store),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
ui <- fluidPage(
theme = shinytheme("united"
),
headerPanel(title="SIG-WEB", windowTitle ="SahelGeo"
),
fluidRow(
),
dashboardPage(
skin = "yellow",
dashboardHeader( title = "SahelGeo"
),
dashboardSidebar( width = 6,
sidebarMenu(
menuItem("Visualisation des données", tabName = "visualisation",
icon = shiny::icon("angle-double-right")
)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "visualisation",
h1("Visualisation des données"),
# login section
shinyauthr::loginUI(id = "login"),
# logout button
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
leafletOutput("mymap"))
)
)
)
)
library(shinythemes)
library(leaflet)
library(shinyauthr)
ui <- fluidPage(
theme = shinytheme("united"
),
headerPanel(title="SIG-WEB", windowTitle ="SahelGeo"
),
fluidRow(
),
dashboardPage(
skin = "yellow",
dashboardHeader( title = "SahelGeo"
),
dashboardSidebar( width = 6,
sidebarMenu(
menuItem("Visualisation des données", tabName = "visualisation",
icon = shiny::icon("angle-double-right")
)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "visualisation",
h1("Visualisation des données"),
# login section
shinyauthr::loginUI(id = "login"),
# logout button
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
leafletOutput("mymap"))
)
)
)
)
library(shiny)
library(shiny)
ui <- fluidPage(
theme = shinytheme("united"
),
headerPanel(title="SIG-WEB", windowTitle ="SahelGeo"
),
fluidRow(
),
dashboardPage(
skin = "yellow",
dashboardHeader( title = "SahelGeo"
),
dashboardSidebar( width = 6,
sidebarMenu(
menuItem("Visualisation des données", tabName = "visualisation",
icon = shiny::icon("angle-double-right")
)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "visualisation",
h1("Visualisation des données"),
# login section
shinyauthr::loginUI(id = "login"),
# logout button
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
leafletOutput("mymap"))
)
)
)
)
library(shinydashboard)
library(shinydashboard)
ui <- fluidPage(
theme = shinytheme("united"
),
headerPanel(title="SIG-WEB", windowTitle ="SahelGeo"
),
fluidRow(
),
dashboardPage(
skin = "yellow",
dashboardHeader( title = "SahelGeo"
),
dashboardSidebar( width = 6,
sidebarMenu(
menuItem("Visualisation des données", tabName = "visualisation",
icon = shiny::icon("angle-double-right")
)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "visualisation",
h1("Visualisation des données"),
# login section
shinyauthr::loginUI(id = "login"),
# logout button
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
leafletOutput("mymap"))
)
)
)
)
# Cote Serveur
server <- function(input, output) {
credentials <- shinyauthr::loginServer(
id = "login",
data = user_base,
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
log_out = reactive(logout_init())
)
# Logout to hide
logout_init <- shinyauthr::logoutServer(
id = "logout",
active = reactive(credentials()$user_auth)
)
#Affichage des données
output$mymap <- renderLeaflet({
# Show only when authenticated
req(credentials()$user_auth)
sn_map <- leaflet() %>%
addFullscreenControl() %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
setView(lng = -17.244, lat = 14.706,zoom = 15.5) %>%
addPolygons(data = bloc,
color = "black",
weight =1,
smoothFactor = 1,
fillColor =  "blank",
fillOpacity = 0.5 )%>%
addPolylines(data = courbe,
color = "yellow",
weight =1,
smoothFactor = 1,
fillColor =  "blank",
fillOpacity = 0.5,
popup = ~leafpop::popupTable(courbe,
zcol = "Elevation",
row.numbers = FALSE, feature.id = FALSE))%>%
addCircleMarkers(data = note,
color = "red",
radius = 2,
label = lapply(note$label, HTML
),
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
#Phase de deploiement
library(rsconnect)
#Phase de deploiement
library(rsconnect)
ùrsconnect::setAccountInfo(name='mycarto', token='0D187CDE76C851E529528F447E6AA695',
secret='BBFfnh40h9Rzvi+KDgn7ZmxJEQKGwpWamrZYhQP/')
rsconnect::setAccountInfo(name='mycarto', token='0D187CDE76C851E529528F447E6AA695',
secret='BBFfnh40h9Rzvi+KDgn7ZmxJEQKGwpWamrZYhQP/')
deployApp()
library(wqTools)
library(ggvis)
library(SwimmeR)
library(leaflet.extras)
library(leaflet.providers)
library(sp)
options(tz="Africa/Daka")
Sys.setenv(TZ="Africa/Dakar")
Sys.getenv("TZ")
library(wqTools)
library("jsonlite")
library("jsonlite")
#Phase de deploiement
library(rsconnect)
rsconnect::setAccountInfo(name='mycarto', token='0D187CDE76C851E529528F447E6AA695',
secret='BBFfnh40h9Rzvi+KDgn7ZmxJEQKGwpWamrZYhQP/')
deployApp()
options(tz="Africa/Daka")
Sys.setenv(TZ="Africa/Dakar")
Sys.getenv("TZ")
library(wqTools)
library("jsonlite")
#Phase de deploiement
library(rsconnect)
system2()
install.packages("openssl")
message('library paths:\n', paste('... ', .libPaths(), sep='', collapse='\n'))
chrome.portable = file.path(getwd(),
'GoogleChromePortable/App/Chrome-bin/chrome.exe')
launch.browser = function(appUrl, browser.path=chrome.portable) {
browser.path = chartr('/', '\\', browser.path)
message('Browser path: ', browser.path)
CMD = browser.path
ARGS = sprintf('--app="%s"', appUrl)
system2(CMD, args=ARGS, wait=FALSE)
NULL
}
shiny::runApp('./shiny/', launch.browser=launch.browser)
library("openssl")
library("openssl")
# provide some initialization status updates to assure the user that something
# is happening
pb = winProgressBar(
title = sprintf('Starting %s ...', config$appname),
label = 'Initializing ...'
)
ensure('jsonlite', load = TRUE)
config = fromJSON(file.path(appwd, 'app', 'config.cfg'))
config = fromJSON(file.path(appwd, 'app', 'config.cfg'))
library(jsonlite)
library(jsonlite)
rsconnect::setAccountInfo(name='mycarto', token='0D187CDE76C851E529528F447E6AA695',
secret='BBFfnh40h9Rzvi+KDgn7ZmxJEQKGwpWamrZYhQP/')
deployApp()
ui <- fluidPage(
theme = shinytheme("united"
),
headerPanel(title="SIG-WEB", windowTitle ="SahelGeo"
),
fluidRow(
),
dashboardPage(
skin = "yellow",
dashboardHeader( title = "SahelGeo"
),
dashboardSidebar( width = 6,
sidebarMenu(
menuItem("Visualisation des données", tabName = "visualisation",
icon = shiny::icon("angle-double-right")
)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "visualisation",
h1("Visualisation des données"),
# login section
shinyauthr::loginUI(id = "login"),
# logout button
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
leafletOutput("mymap"))
)
)
)
)
# Cote Serveur
server <- function(input, output) {
credentials <- shinyauthr::loginServer(
id = "login",
data = user_base,
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
log_out = reactive(logout_init())
)
# Logout to hide
logout_init <- shinyauthr::logoutServer(
id = "logout",
active = reactive(credentials()$user_auth)
)
#Affichage des données
output$mymap <- renderLeaflet({
# Show only when authenticated
req(credentials()$user_auth)
sn_map <- leaflet() %>%
addFullscreenControl() %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
setView(lng = -17.244, lat = 14.706,zoom = 15.5) %>%
addPolygons(data = bloc,
color = "black",
weight =1,
smoothFactor = 1,
fillColor =  "blank",
fillOpacity = 0.5 )%>%
addPolylines(data = courbe,
color = "yellow",
weight =1,
smoothFactor = 1,
fillColor =  "blank",
fillOpacity = 0.5,
popup = ~leafpop::popupTable(courbe,
zcol = "Elevation",
row.numbers = FALSE, feature.id = FALSE))%>%
addCircleMarkers(data = note,
color = "red",
radius = 2,
label = lapply(note$label, HTML
),
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Temporary debugging
output$debugging <- renderPrint({ "Tab not yet available." })
# Temporary debugging
output$debugging <- renderPrint({ "Tab not yet available." })
output$debugging <- renderPrint({ "Tab not yet available." })
